cmake_minimum_required( VERSION 3.0 )

set( CMAKE_INSTALL_PREFIX /usr/local )
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
set(PROJECT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Disallow in-tree build 
if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR )
  message(FATAL_ERROR "In-source builds are not allowed.
Please change to the 'build' directory and run cmake from there.
Preferably, use the 'core_build' script.
This process created the file `CMakeCache.txt' and the directory `CMakeFiles'.
Please delete them.")
endif()


project(CPPPROJECT)
include(CheckCXXCompilerFlag)

add_subdirectory(external)

check_cxx_compiler_flag("-std=c++11" SUPPORTS_CXX11)
if( SUPPORTS_CXX11 )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else()
    check_cxx_compiler_flag("-std=c++0x" SUPPORTS_CXX0X)
    if( SUPPORTS_CXX0X )
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else()
        message("C++11 is not supported")
    endif()
endif()


set(  CPPPROJECT_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )

set( CMAKE_INCLUDE_CURRENT_DIR ON )

# Globbing is not recommended -- CMake cannot tell when new files are added
# But for a generic skeleton...
file( GLOB_RECURSE 
    CPPPROJECT_INCLUDE_FILES 
    ${CPPPROJECT_BASE_DIR}/*.h
    ${CPPPROJECT_BASE_DIR}/*.hpp
    )

file( GLOB_RECURSE 
    CPPPROJECT_SOURCE_FILES
    ${CPPPROJECT_BASE_DIR}/*.cpp
    ${CPPPROJECT_BASE_DIR}/*.cc
    ${CPPPROJECT_BASE_DIR}/*.c
    ${CPPPROJECT_BASE_DIR}/*.C
    ${CPPPROJECT_BASE_DIR}/*.mm
    )

# Ignore C files generated by CMake
foreach (TMP_PATH ${CPPPROJECT_SOURCE_FILES})
    string (FIND ${TMP_PATH} CMakeFiles EXCLUDE_DIR_FOUND)
    if (NOT ${EXCLUDE_DIR_FOUND} EQUAL -1)
        list (REMOVE_ITEM CPPPROJECT_SOURCE_FILES ${TMP_PATH})
    endif ()
endforeach(TMP_PATH)

file(
    COPY ${CPPPROJECT_INCLUDE_FILES} 
    DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/CPPPROJECT
    )

include_directories( ${Boost_INCLUDE_DIR} )

set( ALL_SOURCES ${CPPPROJECT_INCLUDE_FILES} ${CPPPROJECT_SOURCE_FILES} )

add_executable( CPPPROJECT ${ALL_SOURCES} )

# INSTALL
# -------

install (
    TARGETS CPPPROJECT
    RUNTIME DESTINATION lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    )

